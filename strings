def isAnagrams(s,t):
    if len(s)!=len(t):
        return False
    elif sorted(s)==sorted(t):
        return True
    else:
        return False
s="hello"
t="lelho"
isAnagrams(s,t)


palindrome string
import re
def ispalidrome(s):
    if len(s)==0:
        return True
    else:
        start=0
        s=s.lower()
        newS=re.sub([r"[^a-zA-Z0-9]","",s)
        end=len(newS)-1
        while start<end:
            if newS[start]==newS[end]:
                start+=1
                end+=1
            else:
                return False
        return True
s="malayalam"
ispalidrome(s)




word pattern
def wordPattern(pattern,str):
    if pattern==None or str==None:
        return False
    else:
        len_str=len(str.split(" "))
        len_pattern=len(pattern)
        if len(str)!=len(pattern):
            return False
        str=str.split(" ")
        lookup={}
        for i in range(0,len(pattern)):
            s=str[i]
            p=pattern[i]
            if p in lookup:
                if lookup[p]!=s:
                    return False
                else:
                    if s in lookup.values():
                        return False
                    lookup[p]=s
            return True
        
if __name__ == "__main__":
    pattern = "abba"
    str = "dog cat cat dog"
    print(wordPattern(pattern, str))

def isvalid(s):
    if s==[]:
        return False
    else:
        stack=[]
        balenced=True
        index=0
        while index<len(s) and balenced:
            symbol=s[index]
            if symbol in "({[":
                stack.append(symbol)
            else:
                if stack==[]:
                    balenced=False
                else:
                    top=stack.pop()
                    if not self.matches(top,symbol):
                        balenced=False
            index=index+1
            
        if balenced and stack==[]:
            return True
        else:
            return False
        

def matches(open,close):
    openings="({["
    closings=")}]"
    
    return openings.index(open)==closings.index(close)
    
